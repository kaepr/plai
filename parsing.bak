#lang plait
(print-only-errors #true)

(define-type Exp
  [num (n : Number)]
  [plus (left : Exp) (right : Exp)])

(define (calc e)
  (type-case Exp e
    [(num n) n]
    [(plus l r) (+ (calc l) (calc r))]))

(s-exp-list? `1)

(s-exp->list `{+ 1 2})

(s-exp->symbol `+)

(define (parse s)
  (cond
    [(s-exp-number? s)
     (num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([l (s-exp->list s)])
       (if (symbol=? '+
                     (s-exp->symbol (first l)))
           (plus (parse (second l))
                 (parse (third l)))
           (error 'parse "list not an addition")))]))

(test (parse `1) (num 1))
(test (parse `2.3) (num 2.3))
(test (parse `{+ 1 2}) (plus (num 1) (num 2)))
(test (parse `{+ 1
{+ {+ 2 3}
4}})
(plus (num 1)
(plus (plus (num 2)
(num 3))
(num 4))))

(define (run s)
  (calc (parse s)))




; (test/exn (parse `{1 + 2}) "addition")